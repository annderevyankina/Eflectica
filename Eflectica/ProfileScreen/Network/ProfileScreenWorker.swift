//
//  ProfileScreenWorker.swift
//  Eflectica
//
//  Created by –ê–Ω–Ω–∞ on 18.05.2025.
//

import Foundation

/// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
enum ProfileError: LocalizedError {
    case invalidURL
    case noResponse
    case apiError(statusCode: Int, body: String)
    case decodingError(Error)

    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
        case .noResponse:
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
        case .apiError(let status, let body):
            return "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É \(status): \(body)"
        case .decodingError(let err):
            return "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: \(err.localizedDescription)"
        }
    }
}

final class ProfileScreenWorker {
    private let baseURL = "http://localhost:3000"

    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    func fetchCurrentUser(token: String,
                          completion: @escaping (Result<User, Error>) -> Void) {
        let endpoint = ProfileScreenEndpoint.getCurrentUser(token: token)
        let urlString = baseURL + endpoint.compositePath
        print("‚Üí Request URL: \(urlString)")

        guard let url = URL(string: urlString) else {
            print("üõë Error: invalid URL")
            return completion(.failure(ProfileError.invalidURL))
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        endpoint.headers.forEach { header, value in
            request.setValue(value, forHTTPHeaderField: header)
        }
        print("‚Üí Request Headers:", request.allHTTPHeaderFields ?? [:])
        print("‚Üí Token for request:", token)

        URLSession.shared.dataTask(with: request) { data, response, error in
            // 1. –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            if let error = error {
                print("üõë Network error:", error)
                return DispatchQueue.main.async {
                    completion(.failure(error))
                }
            }

            // 2. HTTP-–æ—Ç–≤–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ
            guard let http = response as? HTTPURLResponse, let data = data else {
                print("üõë Error: no HTTP response or data")
                return DispatchQueue.main.async {
                    completion(.failure(ProfileError.noResponse))
                }
            }
            print("‚û°Ô∏è HTTP status code:", http.statusCode)

            // 3. –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            let rawBody = String(data: data, encoding: .utf8) ?? "<non-UTF8 data>"
            print("üì• Raw response:\n\(rawBody)")

            // 4. –û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è API
            guard (200...299).contains(http.statusCode) else {
                let apiErr = ProfileError.apiError(statusCode: http.statusCode, body: rawBody)
                print("üõë API error:", apiErr.errorDescription ?? "")
                return DispatchQueue.main.async {
                    completion(.failure(apiErr))
                }
            }

            // 5. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ User
            do {
                let decoder = JSONDecoder()
                // –£–ë–†–ê–õ–ò: decoder.keyDecodingStrategy = .convertFromSnakeCase
                let user = try decoder.decode(User.self, from: data)
                DispatchQueue.main.async {
                    completion(.success(user))
                }
            } catch {
                print("üõë Decoding error:", error)
                DispatchQueue.main.async {
                    completion(.failure(ProfileError.decodingError(error)))
                }
            }
        }
        .resume()
    }

    /// PATCH –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func patchProfile(token: String, body: [String: Any], completion: @escaping (Result<User, Error>) -> Void) {
        let endpoint = ProfileScreenEndpoint.patchProfile(token: token)
        let urlString = baseURL + endpoint.compositePath
        print("‚Üí PATCH Profile URL: \(urlString)")
        guard let url = URL(string: urlString) else {
            return completion(.failure(ProfileError.invalidURL))
        }
        var request = URLRequest(url: url)
        request.httpMethod = "PATCH"
        endpoint.headers.forEach { header, value in
            request.setValue(value, forHTTPHeaderField: header)
        }
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body, options: [])
        } catch {
            return completion(.failure(error))
        }
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                return DispatchQueue.main.async { completion(.failure(error)) }
            }
            guard let http = response as? HTTPURLResponse, let data = data else {
                return DispatchQueue.main.async { completion(.failure(ProfileError.noResponse)) }
            }
            let rawBody = String(data: data, encoding: .utf8) ?? "<non-UTF8 data>"
            print("‚û°Ô∏è PATCH HTTP status code:", http.statusCode)
            print("üì• PATCH Raw response:\n\(rawBody)")
            guard (200...299).contains(http.statusCode) else {
                let apiErr = ProfileError.apiError(statusCode: http.statusCode, body: rawBody)
                return DispatchQueue.main.async { completion(.failure(apiErr)) }
            }
            do {
                let user = try JSONDecoder().decode(User.self, from: data)
                DispatchQueue.main.async { completion(.success(user)) }
            } catch {
                DispatchQueue.main.async { completion(.failure(ProfileError.decodingError(error))) }
            }
        }.resume()
    }

    /// DELETE –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func deleteProfile(token: String, completion: @escaping (Result<Void, Error>) -> Void) {
        let endpoint = ProfileScreenEndpoint.deleteProfile(token: token)
        let urlString = baseURL + endpoint.compositePath
        print("‚Üí DELETE Profile URL: \(urlString)")
        guard let url = URL(string: urlString) else {
            return completion(.failure(ProfileError.invalidURL))
        }
        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        endpoint.headers.forEach { header, value in
            request.setValue(value, forHTTPHeaderField: header)
        }
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                return DispatchQueue.main.async { completion(.failure(error)) }
            }
            guard let http = response as? HTTPURLResponse else {
                return DispatchQueue.main.async { completion(.failure(ProfileError.noResponse)) }
            }
            print("‚û°Ô∏è DELETE HTTP status code:", http.statusCode)
            guard (200...299).contains(http.statusCode) else {
                let rawBody = data.flatMap { String(data: $0, encoding: .utf8) } ?? "<no data>"
                let apiErr = ProfileError.apiError(statusCode: http.statusCode, body: rawBody)
                return DispatchQueue.main.async { completion(.failure(apiErr)) }
            }
            DispatchQueue.main.async { completion(.success(())) }
        }.resume()
    }
}

